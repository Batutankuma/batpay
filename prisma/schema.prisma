// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname    String
  phone       String       @unique
  avatar      String
  password    String
  date_create DateTime     @default(now())
  date_update DateTime     @updatedAt
  Comptes     Comptes[]
  Developper  Developper[]
  RelationA   Relation[]   @relation("userIdA")
  RelationB   Relation[]   @relation("userIdB")
}

model Comptes {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  code         String
  montant      Float
  user         User?       @relation(fields: [clientsId], references: [id])
  developper   Developper? @relation(fields: [developperId], references: [id])
  date_create  DateTime    @default(now())
  date_update  DateTime    @updatedAt
  RetratsA     Transfert[] @relation("comptesIdA")
  RetratsB     Transfert[] @relation("comptesIdB")
  clientsId    String?     @db.ObjectId
  developperId String?     @db.ObjectId
}

model Devise {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  name        Float
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
}

model Developper {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  codeAuth    String?
  date_create DateTime  @default(now())
  date_update DateTime  @updatedAt
  Comptes     Comptes[]
  userId      String    @db.ObjectId
}

model Transfert {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  montant     Float
  compteA     Comptes  @relation("comptesIdA", fields: [comptesIdA], references: [id])
  compteB     Comptes  @relation("comptesIdB", fields: [comptesIdB], references: [id])
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  comptesIdA  String
  comptesIdB  String
}

model Relation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  relationb    User     @relation("userIdA", fields: [userIdA], references: [id])
  relationa    User     @relation("userIdB", fields: [userIdB], references: [id])
  date_create DateTime @default(now())
  date_update DateTime @updatedAt
  userIdA     String
  userIdB     String
}
